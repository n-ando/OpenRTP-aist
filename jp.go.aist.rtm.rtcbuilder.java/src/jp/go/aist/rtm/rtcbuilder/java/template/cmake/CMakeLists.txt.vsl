cmake_minimum_required(VERSION 3.5.1)

project(${rtcParam.name})
string(TOLOWER ${dol}{PROJECT_NAME} PROJECT_NAME_LOWER)
include("${dol}{PROJECT_SOURCE_DIR}/cmake/utils.cmake")
set(PROJECT_VERSION ${rtcParam.version} CACHE STRING "${rtcParam.name} version")
set(UPGRADE_GUID "")
DISSECT_VERSION()
set(PROJECT_SHORT_VER ${dol}{PROJECT_VERSION_MAJOR}${dol}{PROJECT_VERSION_MINOR}${dol}{PROJECT_VERSION_REVISION})
set(PROJECT_DESCRIPTION "${rtcParam.description}")
set(PROJECT_VENDOR "${rtcParam.vender}")
#if( ${rtcParam.docCreator.length()} > 0 )
set(PROJECT_MAINTAINER "${rtcParam.docCreator}")
#else
set(PROJECT_MAINTAINER "unknown")
#end
set(PROJECT_TYPE "java/${rtcParam.category}")

find_package(OpenRTM REQUIRED)
set(RTM_VER ${dol}{OPENRTM_VERSION})
set(RTM_SHORT_VER ${dol}{OPENRTM_VERSION_MAJOR}${dol}{OPENRTM_VERSION_MINOR}${dol}{OPENRTM_VERSION_PATCH})

function(get_dist ARG0)
  if(NOT ${dol}{CMAKE_SYSTEM_NAME} MATCHES "Linux")
    set(${dol}{ARG0} ${dol}{CMAKE_SYSTEM_NAME} PARENT_SCOPE)
    return()
  endif()
  foreach(dist Debian Ubuntu RedHat Fedora CentOS Raspbian)
    execute_process(
      COMMAND grep ${dol}{dist} -s /etc/issue /etc/os-release /etc/redhat-release /etc/system-release
      OUTPUT_VARIABLE dist_name
      )
    if(${dol}{dist_name} MATCHES ${dol}{dist})
      set(${dol}{ARG0} ${dol}{dist} PARENT_SCOPE)
      return()
    endif()
  endforeach()
endfunction(get_dist)

function(get_pkgmgr ARG0)
  get_dist(DIST_NAME)
  if(${dol}{DIST_NAME} MATCHES "Debian" OR
     ${dol}{DIST_NAME} MATCHES "Ubuntu" OR
     ${dol}{DIST_NAME} MATCHES "Raspbian")
     set(${dol}{ARG0} "DEB" PARENT_SCOPE)
     return()
  endif()
  if(${dol}{DIST_NAME} MATCHES "RedHat" OR
     ${dol}{DIST_NAME} MATCHES "Fedora" OR
     ${dol}{DIST_NAME} MATCHES "CentOS")
     set(${dol}{ARG0} "RPM" PARENT_SCOPE)
     return()
  endif()
endfunction(get_pkgmgr)

get_dist(DIST_NAME)
MESSAGE(STATUS "Distribution is ${dol}{DIST_NAME}")

get_pkgmgr(PKGMGR)
if(PKGMGR AND NOT LINUX_PACKAGE_GENERATOR)
 set(LINUX_PACKAGE_GENERATOR ${dol}{PKGMGR})
 if(${dol}{PKGMGR} MATCHES "DEB")
   execute_process(COMMAND dpkg --print-architecture
     OUTPUT_VARIABLE CPACK_DEBIAN_PACKAGE_ARCHITECTURE
     OUTPUT_STRIP_TRAILING_WHITESPACE)
   message(STATUS "Package manager is ${dol}{PKGMGR}. Arch is ${dol}{CPACK_DEBIAN_PACKAGE_ARCHITECTURE}.")
 endif()
 if(${dol}{PKGMGR} MATCHES "RPM")
   execute_process(COMMAND uname "-m"
     OUTPUT_VARIABLE CPACK_RPM_PACKAGE_ARCHITECTURE
     OUTPUT_STRIP_TRAILING_WHITESPACE)
   message(STATUS "Package manager is ${dol}{PKGMGR}. Arch is ${dol}{CPACK_RPM_PACKAGE_ARCHITECTURE}.")
 endif()
endif()

option(BUILD_DOCUMENTATION "Build the documentation" OFF)

set(CLASS_FILES_DIR "${dol}{CMAKE_CURRENT_SOURCE_DIR}/bin")
#if( ${tmpltHelper.checkUserDefined(${rtcParam})} )
file(GLOB CLASS_FILES "${dol}{CLASS_FILES_DIR}/*.class")
file(GLOB IDL_CLASS_DIR "${dol}{CMAKE_CURRENT_SOURCE_DIR}/bin/*")
list(REMOVE_ITEM IDL_CLASS_DIR ${dol}{CLASS_FILES})
#end
set(EXEC_FILES ""
    ${dol}{CLASS_FILES_DIR}/${dol}{PROJECT_NAME}.class 
    ${dol}{CLASS_FILES_DIR}/${dol}{PROJECT_NAME}Comp.class 
    ${dol}{CLASS_FILES_DIR}/${dol}{PROJECT_NAME}Impl.class
)
file(GLOB IDL_FILES "${dol}{CMAKE_CURRENT_SOURCE_DIR}/idl/*.idl")

if(WIN32)
    set(SCRIPT_FILE ""
                    ${dol}{CMAKE_CURRENT_SOURCE_DIR}/${dol}{PROJECT_NAME}.bat)
else()
    set(SCRIPT_FILE ""
                    ${dol}{CMAKE_CURRENT_SOURCE_DIR}/${dol}{PROJECT_NAME}.sh)
endif()
${sharp}end

set(OTHER_SRCS RTC.xml ${rtcParam.name}.conf rtc.conf)

${sharp} check java installed
find_package(Java)

if(WIN32)
   set(OPENRTM_SHARE_PREFIX "OpenRTM-aist/${dol}{RTM_VER}/Components/${dol}{PROJECT_TYPE}")
   set(INSTALL_PREFIX ${dol}{PROJECT_NAME})
   if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
      set(CMAKE_INSTALL_PREFIX "${dol}{OPENRTM_DIR}/Components/${dol}{PROJECT_TYPE}/${dol}{PROJECT_NAME}" CACHE PATH "..." FORCE)
   endif()
else()
   set(OPENRTM_SHARE_PREFIX "share/openrtm-${dol}{OPENRTM_VERSION_MAJOR}.${dol}{OPENRTM_VERSION_MINOR}")
   set(INSTALL_PREFIX "${dol}{OPENRTM_SHARE_PREFIX}/components/${dol}{PROJECT_TYPE}/${dol}{PROJECT_NAME}")
endif()

install(FILES ${dol}{EXEC_FILES} DESTINATION "${dol}{INSTALL_PREFIX}"
        COMPONENT component)

#if( ${tmpltHelper.checkUserDefined(${rtcParam})} )
install(DIRECTORY ${dol}{IDL_CLASS_DIR} DESTINATION "${dol}{INSTALL_PREFIX}"
        COMPONENT component)

#end
install(PROGRAMS ${dol}{SCRIPT_FILE} DESTINATION "${dol}{INSTALL_PREFIX}"
        COMPONENT component)

install(FILES ${dol}{OTHER_SRCS} DESTINATION ${dol}{INSTALL_PREFIX}
        COMPONENT component)

if(IDL_FILES)
    install(FILES ${dol}{IDL_FILES} DESTINATION ${dol}{INSTALL_PREFIX}/idl
        COMPONENT component)
endif(IDL_FILES) 

${sharp} add uninstall target
configure_file(
    "${dol}{CMAKE_CURRENT_SOURCE_DIR}/cmake/uninstall_target.cmake.in"
    "${dol}{CMAKE_CURRENT_BINARY_DIR}/uninstall_target.cmake"
    IMMEDIATE @ONLY)
add_custom_target(uninstall COMMAND 
    ${dol}{CMAKE_COMMAND} -P ${dol}{CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)

if(WIN32)
    ${sharp} start menu
    set_property(INSTALL "${dol}{INSTALL_PREFIX}/${dol}{PROJECT_NAME}.bat"
        PROPERTY CPACK_START_MENU_SHORTCUTS "${dol}{PROJECT_NAME}.bat")
endif()

${sharp} target settings for document
if(BUILD_DOCUMENTATION)
    add_subdirectory(doc)
endif(BUILD_DOCUMENTATION)

set(cpack_options "${dol}{PROJECT_BINARY_DIR}/cpack_options.cmake")
configure_file("${dol}{PROJECT_SOURCE_DIR}/cmake/cpack_options.cmake.in"
    ${dol}{cpack_options} @ONLY)

set(CPACK_PROJECT_CONFIG_FILE ${dol}{cpack_options})
include(${dol}{CPACK_PROJECT_CONFIG_FILE})
include(CPack)
